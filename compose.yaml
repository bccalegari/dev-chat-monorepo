services:
  envoy:
    image: envoyproxy/envoy:v1.35.0
    container_name: envoy
    ports:
      - "80:80"
      - "9092:9092"
      - "5432:5432"
      - "7687:7687"
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    networks:
      - dev-chat-network
    depends_on:
      - keycloak
      - keycloak-postgres
      - kong
      - webapp
      - kafka
      - kafka-schema-registry
      - kafka-connect
      - neo4j

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    container_name: keycloak
    depends_on:
      - keycloak-postgres
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: ${KEYCLOAK_DB_USERNAME}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: ["start-dev", "--import-realm"]
    networks:
      - dev-chat-network

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USERNAME}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_DB: keycloak
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=4", "-c", "max_wal_senders=4"]
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    networks:
      - dev-chat-network

  kong:
    build:
      context: kong
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong-config.yaml
      KONG_PLUGINS: bundled,dev-chat-kong-keycloak-jwt-verify
    volumes:
      - ./kong/kong-config.yaml:/etc/kong/kong-config.yaml
      - ./kong/plugins/dev-chat-kong-keycloak-jwt-verify:/usr/local/share/lua/5.1/kong/plugins/dev-chat-kong-keycloak-jwt-verify
    networks:
      - dev-chat-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CLUSTER_ID: A1Vt-bp6T8qLCNLhgtP0nw
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - dev-chat-network

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.4.10
    container_name: kafka-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    networks:
      - dev-chat-network
  
  kafka-connect:
    build:
      context: kafka-connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - kafka-schema-registry
      - keycloak-postgres
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    networks:
      - dev-chat-network

  webapp:
    build:
      context: dev-chat-webapp
      dockerfile: Dockerfile.dev
    container_name: webapp
    volumes:
      - ./dev-chat-webapp:/app
      - /app/node_modules
    networks:
      - dev-chat-network
    extra_hosts:
      - "auth.devchat.localhost:host-gateway"

  user-service:
    build: 
      context: dev-chat-user-service
      dockerfile: Dockerfile.dev
    container_name: user-service
    depends_on:
      - keycloak
      - kafka
      - neo4j
    volumes:
      - ./dev-chat-user-service:/app
      - /app/node_modules
    networks:
      - dev-chat-network

  neo4j:
    image: neo4j:5.26
    container_name: neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
    networks:
      - dev-chat-network

networks:
  dev-chat-network:
    driver: bridge

volumes:
  keycloak-postgres-data:
    driver: local
  kafka-data:
    driver: local
  neo4j_data:
    driver: local